window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "sqldatabase", "modulename": "sqldatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlbase", "modulename": "sqldatabase.sqlbase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlbase.SQLBase", "modulename": "sqldatabase.sqlbase", "qualname": "SQLBase", "kind": "class", "doc": "<p>Abstract base class for SQL-related objects.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Abstract method to convert the object to its SQL representation.</p>\n</blockquote>\n", "bases": "abc.ABC"}, {"fullname": "sqldatabase.sqlbase.SQLBase.to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "SQLBase.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlbase.SQLBaseEnum", "modulename": "sqldatabase.sqlbase", "qualname": "SQLBaseEnum", "kind": "class", "doc": "<p>Base class for SQL-related enumerations.</p>\n\n<h6 id=\"methods\">Methods:</h6>\n\n<blockquote>\n  <p>to_sql: Convert the enumeration value to its SQL representation.</p>\n</blockquote>\n", "bases": "enum.Enum"}, {"fullname": "sqldatabase.sqlbase.SQLBaseEnum.to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "SQLBaseEnum.to_sql", "kind": "function", "doc": "<p>Convert the enumeration value to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the enumeration value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlbase.value_to_sql", "modulename": "sqldatabase.sqlbase", "qualname": "value_to_sql", "kind": "function", "doc": "<p>Convert a Python value to its SQL representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn", "modulename": "sqldatabase.sqlcolumn", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn", "kind": "class", "doc": "<p>Represents a column in a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the column.</li>\n<li><strong>data_type (SQLDataType):</strong>  The data type of the column.</li>\n<li><strong>primary_key (bool):</strong>  Whether the column is a primary key.</li>\n<li><strong>autoincrement (bool):</strong>  Whether the column is auto-incremented.</li>\n<li><strong>not_null (bool):</strong>  Whether the column is NOT NULL.</li>\n<li><strong>unique (bool):</strong>  Whether the column is unique.</li>\n<li><strong>default (Any):</strong>  The default value of the column.</li>\n<li><strong>reference (SQLColumn | None):</strong>  A reference to another column.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n<li><strong>values (type[Enum] | None):</strong>  Enum values for the column.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.__init__", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.__init__", "kind": "function", "doc": "<p>Initialize a SQLColumn instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the column.</li>\n<li><strong>data_type (SQLDataType):</strong>  The data type of the column.</li>\n<li><strong>primary_key (bool, optional):</strong>  Whether the column is a primary key. Defaults to False.</li>\n<li><strong>autoincrement (bool, optional):</strong>  Whether the column is auto-incremented. Defaults to False.</li>\n<li><strong>not_null (bool, optional):</strong>  Whether the column is NOT NULL. Defaults to False.</li>\n<li><strong>unique (bool, optional):</strong>  Whether the column is unique. Defaults to False.</li>\n<li><strong>default (Any, optional):</strong>  The default value of the column. Defaults to None.</li>\n<li><strong>reference (SQLColumn | None, optional):</strong>  A reference to another column. Defaults to None.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n<li><strong>values (type[Enum] | None, optional):</strong>  Enum values for the column. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">data_type</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatatype</span><span class=\"o\">.</span><span class=\"n\">SQLDataType</span>,</span><span class=\"param\">\t<span class=\"n\">primary_key</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">autoincrement</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">not_null</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">unique</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">default_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">reference</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"nb\">type</span><span class=\"p\">[</span><span class=\"n\">enum</span><span class=\"o\">.</span><span class=\"n\">Enum</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.data_type", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.data_type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.primary_key", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.primary_key", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.autoincrement", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.autoincrement", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.not_null", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.not_null", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.unique", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.unique", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.default_value", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.default_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.reference", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.reference", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.values", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.values", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.filters", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.filters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.table", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.table", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqltable.SQLTable | None"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.alias", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.alias", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.fully_qualified_name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.fully_qualified_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.generate_parameter_name", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.generate_parameter_name", "kind": "function", "doc": "<p>Generate a unique parameter name for the column.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: A unique parameter name in the format '<fully_qualified_name>_<uuid>'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.to_sql", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.to_sql", "kind": "function", "doc": "<p>Convert the column to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the column name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumn.default_value_to_sql", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumn.default_value_to_sql", "kind": "function", "doc": "<p>Convert the default value of the column to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the default value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumns", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumns", "kind": "class", "doc": "<p>Container for managing multiple SQLColumn instances.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqlcolumn.SQLColumn]"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumns.item_type", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumns.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlcolumn.SQLColumn&#x27;&gt;"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumnsWithID", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumnsWithID", "kind": "class", "doc": "<p>Specialized SQLColumns container with a predefined 'ID' column.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqlcolumn.SQLColumn]"}, {"fullname": "sqldatabase.sqlcolumn.SQLColumnsWithID.ID", "modulename": "sqldatabase.sqlcolumn", "qualname": "SQLColumnsWithID.ID", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqlcolumn.SQLColumn object&gt;"}, {"fullname": "sqldatabase.sqlcondition", "modulename": "sqldatabase.sqlcondition", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition", "kind": "class", "doc": "<p>Represents a SQL condition used in WHERE, HAVING, or JOIN clauses.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SQLColumn | SQLFunction | SQLSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESQLComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Parameters for the condition.</li>\n<li><strong>_values_to_sql (list[str]):</strong>  SQL representations of the values.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.__init__", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.__init__", "kind": "function", "doc": "<p>Initialize a SQLCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SQLColumn | SQLFunction | SQLSelectStatement):</strong>  The left-hand side of the condition.</li>\n<li><strong>operator (ESQLComparisonOperator):</strong>  The comparison operator.</li>\n<li><strong>right (Any):</strong>  The right-hand side of the condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">SQLSelectStatement</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESQLComparisonOperator</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.left", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.left", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.operator", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.operator", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.right", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.right", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.parameters", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.parameters", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, typing.Any]"}, {"fullname": "sqldatabase.sqlcondition.SQLCondition.to_sql", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCondition.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition", "kind": "class", "doc": "<p>Represents a compound SQL condition combining two conditions with a logical operator.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>left (SQLCondition):</strong>  The left-hand side condition.</li>\n<li><strong>operator (ESQLLogicalOperator):</strong>  The logical operator (e.g., AND, OR).</li>\n<li><strong>right (SQLCondition):</strong>  The right-hand side condition.</li>\n<li><strong>parameters (dict[str, Any]):</strong>  Combined parameters from both conditions.</li>\n</ul>\n", "bases": "SQLCondition"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.__init__", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.__init__", "kind": "function", "doc": "<p>Initialize a SQLCompoundCondition instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>left (SQLCondition):</strong>  The left-hand side condition.</li>\n<li><strong>operator (ESQLLogicalOperator):</strong>  The logical operator (e.g., AND, OR).</li>\n<li><strong>right (SQLCondition):</strong>  The right-hand side condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">left</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESQLLogicalOperator</span>,</span><span class=\"param\">\t<span class=\"n\">right</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.left", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.left", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.operator", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqloperator.ESQLLogicalOperator"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.right", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.right", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.parameters", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlcondition.SQLCompoundCondition.to_sql", "modulename": "sqldatabase.sqlcondition", "qualname": "SQLCompoundCondition.to_sql", "kind": "function", "doc": "<p>Convert the compound condition to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the compound condition.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase", "modulename": "sqldatabase.sqldatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase", "kind": "class", "doc": "<p>Represents a SQL database.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect used by the database.</li>\n<li><strong>tables (T):</strong>  The tables in the database.</li>\n<li><strong>default_schema_name (str | None):</strong>  The default schema name for the database.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase, typing.Generic[~T]"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.__init__", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.__init__", "kind": "function", "doc": "<p>Initialize a SQLDatabase instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the database.</li>\n<li><strong>connection (sqlite3.Connection | pyodbc.Connection):</strong>  The database connection.</li>\n<li><strong>tables (T | None, optional):</strong>  The tables in the database. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">connection</span><span class=\"p\">:</span> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Connection</span> <span class=\"o\">|</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">Connection</span>,</span><span class=\"param\">\t<span class=\"n\">tables</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.dialect", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqltranspiler.ESQLDialect"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.tables", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~T"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.default_schema_name", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.default_schema_name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str | None", "default_value": "None"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.name", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.functions", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.functions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.attached_databases", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.attached_databases", "kind": "variable", "doc": "<p></p>\n", "annotation": ": dict[str, sqldatabase.sqldatabase.SQLDatabase]"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.autocommit", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.autocommit", "kind": "variable", "doc": "<p>Check if autocommit mode is enabled for the database.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>bool: True if autocommit is enabled, False otherwise.</p>\n</blockquote>\n", "annotation": ": bool"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p>Get the fully qualified name of a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to get the fully qualified name for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.execute", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.execute", "kind": "function", "doc": "<p>Execute a raw SQL query.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query to execute.</li>\n<li><strong>parameters (dict[str, Any] | Sequence, optional):</strong>  The parameters for the query. Defaults to ().</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>sqlite3.Cursor | pyodbc.Cursor: The database cursor after execution.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">=</span> <span class=\"p\">()</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqlite3</span><span class=\"o\">.</span><span class=\"n\">Cursor</span> <span class=\"o\">|</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">Cursor</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.commit", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.commit", "kind": "function", "doc": "<p>Commit the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.rollback", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.rollback", "kind": "function", "doc": "<p>Roll back the current transaction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.close", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.close", "kind": "function", "doc": "<p>Close the database connection.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.create_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.create_table", "kind": "function", "doc": "<p>Create a table in the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to create.</li>\n<li><strong>if_not_exists (bool, optional):</strong>  Whether to skip creation if the table already exists. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.create_all_tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.create_all_tables", "kind": "function", "doc": "<p>Create all tables in the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>if_not_exists (bool, optional):</strong>  Whether to skip creation if the tables already exist. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.drop_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.drop_table", "kind": "function", "doc": "<p>Drop a table from the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to drop.</li>\n<li><strong>if_exists (bool, optional):</strong>  Whether to skip dropping if the table does not exist. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.drop_all_tables", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.drop_all_tables", "kind": "function", "doc": "<p>Drop all tables from the database.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>if_exists (bool, optional):</strong>  Whether to skip dropping if the tables do not exist. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.get_table", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.get_table", "kind": "function", "doc": "<p>Get a table by its fully qualified name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table_fully_qualified_name (str):</strong>  The fully qualified name of the table.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLTable: The table with the specified name.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the table is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table_fully_qualified_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.insert_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.insert_records", "kind": "function", "doc": "<p>Insert records into a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to insert records into.</li>\n<li><strong>records (SQLRecord | Sequence[SQLRecord]):</strong>  The records to insert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the inserted records, or None if no IDs are generated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.select_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.select_records", "kind": "function", "doc": "<p>Select records from a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to select records from.</li>\n<li><strong>*items (SQLColumn | SQLFunction):</strong>  The columns or aggregate functions to select.</li>\n<li><strong>where_condition (SQLCondition | None, optional):</strong>  The condition to filter the records. Defaults to None.</li>\n<li><strong>joins (list[SQLJoin] | None, optional):</strong>  The joins to apply. Defaults to None.</li>\n<li><strong>group_by_columns (list[SQLColumn] | None, optional):</strong>  The columns to group by. Defaults to None.</li>\n<li><strong>having_condition (SQLCondition | None, optional):</strong>  The condition to filter the groups. Defaults to None.</li>\n<li><strong>order_by_items (list[SQLColumn | SQLFunction | ESQLOrderByType] | None, optional):</strong>  The items to order by. Defaults to None.</li>\n<li><strong>distinct (bool, optional):</strong>  Whether to select distinct records. Defaults to False.</li>\n<li><strong>limit (int | None, optional):</strong>  The maximum number of records to return. Defaults to None.</li>\n<li><strong>offset (int | None, optional):</strong>  The number of records to skip. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SQLRecord]: The selected records.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SQLJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESQLOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.update_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.update_records", "kind": "function", "doc": "<p>Update records in a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to update records in.</li>\n<li><strong>record (SQLRecord):</strong>  The record with updated values.</li>\n<li><strong>where_condition (SQLCondition):</strong>  The condition to filter the records to update.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the updated records, or None if no IDs are generated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.delete_records", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.delete_records", "kind": "function", "doc": "<p>Delete records from a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to delete records from.</li>\n<li><strong>where_condition (SQLCondition):</strong>  The condition to filter the records to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the deleted records, or None if no IDs are generated.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatabase.SQLDatabase.record_count", "modulename": "sqldatabase.sqldatabase", "qualname": "SQLDatabase.record_count", "kind": "function", "doc": "<p>Get the count of records in a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to count records in.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The count of records in the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype", "modulename": "sqldatabase.sqldatatype", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType", "kind": "class", "doc": "<p>Represents a SQL data type.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values to database format.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None):</strong>  Function to convert values from database format.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.database", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatabase.SQLDatabase"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.name", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.type", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.to_database_converter", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.to_database_converter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.from_database_converter", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.from_database_converter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataType.to_sql", "kind": "function", "doc": "<p>Convert the data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypeWithParameter", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypeWithParameter", "kind": "class", "doc": "<p>Represents a SQL data type with an additional parameter.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>parameter (Any):</strong>  The parameter associated with the data type.</li>\n</ul>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypeWithParameter.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypeWithParameter.__init__", "kind": "function", "doc": "<p>Initialize a SQLDataTypeWithParameter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the data type.</li>\n<li><strong>type_ (type):</strong>  The Python type corresponding to the SQL data type.</li>\n<li><strong>parameter (Any):</strong>  The parameter associated with the data type.</li>\n<li><strong>to_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values to database format. Defaults to None.</li>\n<li><strong>from_database_converter (Callable[[Any], Any] | None, optional):</strong>  Function to convert values from database format. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"nb\">type</span>,</span><span class=\"param\">\t<span class=\"n\">parameter</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">to_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">from_database_converter</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"n\">Callable</span><span class=\"p\">[[</span><span class=\"n\">Any</span><span class=\"p\">],</span> <span class=\"n\">Any</span><span class=\"p\">]]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypeWithParameter.parameter", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypeWithParameter.parameter", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypeWithParameter.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypeWithParameter.to_sql", "kind": "function", "doc": "<p>Convert the data type with parameter to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the data type with parameter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLIntegerDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLIntegerDataType", "kind": "class", "doc": "<p>Represents the SQL INTEGER data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLIntegerDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLIntegerDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLIntegerDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLFloatDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLFloatDataType", "kind": "class", "doc": "<p>Represents the SQL REAL (float) data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLFloatDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLFloatDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLFloatDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLTextDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTextDataType", "kind": "class", "doc": "<p>Represents the SQL TEXT data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLTextDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTextDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLTextDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLTextDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTextDataType.to_sql", "kind": "function", "doc": "<p>Convert the TEXT data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the TEXT data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLBlobDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLBlobDataType", "kind": "class", "doc": "<p>Represents the SQL BLOB data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLBlobDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLBlobDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLBlobDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLBooleanDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLBooleanDataType", "kind": "class", "doc": "<p>Represents the SQL BOOLEAN data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLBooleanDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLBooleanDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLBooleanDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLBooleanDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLBooleanDataType.to_sql", "kind": "function", "doc": "<p>Convert the BOOLEAN data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the BOOLEAN data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLDateDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateDataType", "kind": "class", "doc": "<p>Represents the SQL DATE data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLDateDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLDateDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLDateDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateDataType.to_sql", "kind": "function", "doc": "<p>Convert the DATE data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the DATE data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLTimeDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTimeDataType", "kind": "class", "doc": "<p>Represents the SQL TIME data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLTimeDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTimeDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLTimeDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLTimeDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLTimeDataType.to_sql", "kind": "function", "doc": "<p>Convert the TIME data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the TIME data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLDateTimeDataType", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateTimeDataType", "kind": "class", "doc": "<p>Represents the SQL DATETIME data type.</p>\n", "bases": "SQLDataType"}, {"fullname": "sqldatabase.sqldatatype.SQLDateTimeDataType.__init__", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateTimeDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLDateTimeDataType instance.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">()</span>"}, {"fullname": "sqldatabase.sqldatatype.SQLDateTimeDataType.to_sql", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDateTimeDataType.to_sql", "kind": "function", "doc": "<p>Convert the DATETIME data type to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the DATETIME data type.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes", "kind": "class", "doc": "<p>Container for managing multiple SQL data types.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SQLDataType]"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.item_type", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqldatatype.SQLDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.BLOB", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.BLOB", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLBlobDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.BOOLEAN", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.BOOLEAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLBooleanDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.DATE", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.DATE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLDateDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.DATETIME", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.DATETIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLDateTimeDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.FLOAT", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.FLOAT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLFloatDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.INTEGER", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.INTEGER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLIntegerDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.TEXT", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.TEXT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLTextDataType object&gt;"}, {"fullname": "sqldatabase.sqldatatype.SQLDataTypes.TIME", "modulename": "sqldatabase.sqldatatype", "qualname": "SQLDataTypes.TIME", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;sqldatabase.sqldatatype.SQLTimeDataType object&gt;"}, {"fullname": "sqldatabase.sqlfilter", "modulename": "sqldatabase.sqlfilter", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilter", "kind": "class", "doc": "<p>Represents a filter applied to a SQL column.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>operator (ESQLComparisonOperator):</strong>  The comparison operator used in the filter.</li>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n</ul>\n", "bases": "sqldatabase.sqlcondition.SQLCondition"}, {"fullname": "sqldatabase.sqlfilter.SQLFilter.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilter.__init__", "kind": "function", "doc": "<p>Initializes a SQLFilter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n<li><strong>*values:</strong>  The values used in the filter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">values</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilter.operator", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqloperator.ESQLComparisonOperator"}, {"fullname": "sqldatabase.sqlfilter.SQLFilter.item", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilter.item", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLValueFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLValueFilter", "kind": "class", "doc": "<p>Represents a filter that uses a single value for comparison.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value used in the filter.</li>\n</ul>\n", "bases": "SQLFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLValueFilter.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLValueFilter.__init__", "kind": "function", "doc": "<p>Initializes a SQLValueFilter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n<li><strong>value (Any):</strong>  The value used in the filter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLValueFilter.value", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLValueFilter.value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLEqualFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLEqualFilter", "kind": "class", "doc": "<p>Represents a filter that checks for equality.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLEqualFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLEqualFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.EQUAL: &#x27;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLNotEqualFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotEqualFilter", "kind": "class", "doc": "<p>Represents a filter that checks for inequality.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLNotEqualFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotEqualFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_EQUAL: &#x27;!=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLLessThanFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLessThanFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is less than another.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLLessThanFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLessThanFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.LESS_THAN: &#x27;&lt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLLessThanOrEqualFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLessThanOrEqualFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is less than or equal to another.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLLessThanOrEqualFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLessThanOrEqualFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLGreaterThanFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLGreaterThanFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is greater than another.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLGreaterThanFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLGreaterThanFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN: &#x27;&gt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLGreaterThanOrEqualFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLGreaterThanOrEqualFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is greater than or equal to another.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLGreaterThanOrEqualFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLGreaterThanOrEqualFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLLikeFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLikeFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value matches a pattern.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLLikeFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLLikeFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.LIKE: &#x27;LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLNotLikeFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotLikeFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value does not match a pattern.</p>\n", "bases": "SQLValueFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLNotLikeFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotLikeFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_LIKE: &#x27;NOT LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLValuesFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLValuesFilter", "kind": "class", "doc": "<p>Represents a filter that uses multiple values for comparison.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>values (Iterable):</strong>  The values used in the filter.</li>\n</ul>\n", "bases": "SQLFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLValuesFilter.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLValuesFilter.__init__", "kind": "function", "doc": "<p>Initializes a SQLValuesFilter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n<li><strong>values (Iterable):</strong>  The values used in the filter.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLInFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLInFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is in a set of values.</p>\n", "bases": "SQLValuesFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLInFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLInFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IN: &#x27;IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLNotInFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotInFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is not in a set of values.</p>\n", "bases": "SQLValuesFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLNotInFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotInFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_IN: &#x27;NOT IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenBaseFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenBaseFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is between two bounds.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n", "bases": "SQLFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenBaseFilter.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenBaseFilter.__init__", "kind": "function", "doc": "<p>Initializes a SQLBetweenBaseFilter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenBaseFilter.lower_value", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenBaseFilter.lower_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenBaseFilter.upper_value", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenBaseFilter.upper_value", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is between two bounds.</p>\n", "bases": "SQLBetweenBaseFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLBetweenFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLBetweenFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.BETWEEN: &#x27;BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLNotBetweenFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotBetweenFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is not between two bounds.</p>\n", "bases": "SQLBetweenBaseFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLNotBetweenFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLNotBetweenFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_BETWEEN: &#x27;NOT BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNullBaseFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNullBaseFilter", "kind": "class", "doc": "<p>Represents a filter that checks for null values.</p>\n", "bases": "SQLFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNullBaseFilter.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNullBaseFilter.__init__", "kind": "function", "doc": "<p>Initializes a SQLIsNullBaseFilter instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filter is applied.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNullFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNullFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is null.</p>\n", "bases": "SQLIsNullBaseFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNullFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNullFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IS_NULL: &#x27;IS NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNotNullFilter", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNotNullFilter", "kind": "class", "doc": "<p>Represents a filter that checks if a value is not null.</p>\n", "bases": "SQLIsNullBaseFilter"}, {"fullname": "sqldatabase.sqlfilter.SQLIsNotNullFilter.operator", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLIsNotNullFilter.operator", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IS_NOT_NULL: &#x27;IS NOT NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters", "kind": "class", "doc": "<p>Represents filters that can be applied to a SQL column or function.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filters are applied.</li>\n</ul>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.__init__", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.__init__", "kind": "function", "doc": "<p>Initializes a SQLFilters instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The column or function to which the filters are applied.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.item", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.item", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.BETWEEN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.BETWEEN", "kind": "function", "doc": "<p>Creates a BETWEEN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLBetweenFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLBetweenFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.EQUAL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.EQUAL", "kind": "function", "doc": "<p>Creates an EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLEqualFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLEqualFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.GREATER_THAN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.GREATER_THAN", "kind": "function", "doc": "<p>Creates a GREATER_THAN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLGreaterThanFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLGreaterThanFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.GREATER_THAN_OR_EQUAL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.GREATER_THAN_OR_EQUAL", "kind": "function", "doc": "<p>Creates a GREATER_THAN_OR_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLGreaterThanOrEqualFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLGreaterThanOrEqualFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.IN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.IN", "kind": "function", "doc": "<p>Creates an IN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (Iterable):</strong>  The values to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLInFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLInFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.IS_NOT_NULL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.IS_NOT_NULL", "kind": "function", "doc": "<p>Creates an IS_NOT_NULL filter.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLIsNotNullFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLIsNotNullFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.IS_NULL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.IS_NULL", "kind": "function", "doc": "<p>Creates an IS_NULL filter.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLIsNullFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLIsNullFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.LESS_THAN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.LESS_THAN", "kind": "function", "doc": "<p>Creates a LESS_THAN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLLessThanFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLLessThanFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.LESS_THAN_OR_EQUAL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.LESS_THAN_OR_EQUAL", "kind": "function", "doc": "<p>Creates a LESS_THAN_OR_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLLessThanOrEqualFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLLessThanOrEqualFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.LIKE", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.LIKE", "kind": "function", "doc": "<p>Creates a LIKE filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLLikeFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLLikeFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.NOT_BETWEEN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.NOT_BETWEEN", "kind": "function", "doc": "<p>Creates a NOT_BETWEEN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>lower_value (Any):</strong>  The lower bound value.</li>\n<li><strong>upper_value (Any):</strong>  The upper bound value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLNotBetweenFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">lower_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span>,</span><span class=\"param\">\t<span class=\"n\">upper_value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLNotBetweenFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.NOT_EQUAL", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.NOT_EQUAL", "kind": "function", "doc": "<p>Creates a NOT_EQUAL filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLNotEqualFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLNotEqualFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.NOT_IN", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.NOT_IN", "kind": "function", "doc": "<p>Creates a NOT_IN filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>values (Iterable):</strong>  The values to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLNotInFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"p\">:</span> <span class=\"n\">Iterable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLNotInFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfilter.SQLFilters.NOT_LIKE", "modulename": "sqldatabase.sqlfilter", "qualname": "SQLFilters.NOT_LIKE", "kind": "function", "doc": "<p>Creates a NOT_LIKE filter.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>value (Any):</strong>  The value to compare.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLNotLikeFilter: The created filter.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfilter</span><span class=\"o\">.</span><span class=\"n\">SQLNotLikeFilter</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfunction", "modulename": "sqldatabase.sqlfunction", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction", "kind": "class", "doc": "<p>Represents a SQL function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the function.</li>\n<li><strong>column (SQLColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.__init__", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.__init__", "kind": "function", "doc": "<p>Initialize a SQLFunction instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column (SQLColumn | None, optional):</strong>  The column the function operates on. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.column", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.column", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.filters", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.filters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.alias", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.alias", "kind": "variable", "doc": "<p>Get the alias for the function.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The alias for the function.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.fully_qualified_name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.fully_qualified_name", "kind": "variable", "doc": "<p>Get the fully qualified name of the function.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the function.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.to_database_converter", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.to_database_converter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[Any], Any]]"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.from_database_converter", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.from_database_converter", "kind": "variable", "doc": "<p></p>\n", "annotation": ": Optional[Callable[[Any], Any]]"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.data_type", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.data_type", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatatype.SQLDataType | None"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.generate_parameter_name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.generate_parameter_name", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfunction.SQLFunction.to_sql", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunction.to_sql", "kind": "function", "doc": "<p>Convert the object to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the object.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlfunction.SQLCountFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLCountFunction", "kind": "class", "doc": "<p>Represents a SQL function (e.g., COUNT, SUM).</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the function.</li>\n<li><strong>column (SQLColumn | None):</strong>  The column the function operates on.</li>\n</ul>\n", "bases": "SQLFunction"}, {"fullname": "sqldatabase.sqlfunction.SQLCountFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLCountFunction.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;count&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctionWithMandatoryColumn", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctionWithMandatoryColumn", "kind": "class", "doc": "<p>Represents a SQL function that requires a column.</p>\n", "bases": "SQLFunction"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctionWithMandatoryColumn.__init__", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctionWithMandatoryColumn.__init__", "kind": "function", "doc": "<p>Initialize a SQLFunctionWithMandatoryColumn instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column (SQLColumn):</strong>  The column the function operates on.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">column</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span></span>)</span>"}, {"fullname": "sqldatabase.sqlfunction.SQLMinFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLMinFunction", "kind": "class", "doc": "<p>Represents the SQL MIN aggregate function.</p>\n", "bases": "SQLFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SQLMinFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLMinFunction.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;min&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SQLMaxFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLMaxFunction", "kind": "class", "doc": "<p>Represents the SQL MAX aggregate function.</p>\n", "bases": "SQLFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SQLMaxFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLMaxFunction.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;max&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SQLSumFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLSumFunction", "kind": "class", "doc": "<p>Represents the SQL SUM aggregate function.</p>\n", "bases": "SQLFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SQLSumFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLSumFunction.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;sum&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SQLAvgFunction", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLAvgFunction", "kind": "class", "doc": "<p>Represents the SQL AVG aggregate function.</p>\n", "bases": "SQLFunctionWithMandatoryColumn"}, {"fullname": "sqldatabase.sqlfunction.SQLAvgFunction.name", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLAvgFunction.name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;avg&#x27;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions", "kind": "class", "doc": "<p>Container for managing multiple SQL functions.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeClassContainer[sqldatabase.sqlfunction.SQLFunction]"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.item_type", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.AVG", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.AVG", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLAvgFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.COUNT", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.COUNT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLCountFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.MAX", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.MAX", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLMaxFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.MIN", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.MIN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLMinFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlfunction.SQLFunctions.SUM", "modulename": "sqldatabase.sqlfunction", "qualname": "SQLFunctions.SUM", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlfunction.SQLSumFunction&#x27;&gt;"}, {"fullname": "sqldatabase.sqlitedatabase", "modulename": "sqldatabase.sqlitedatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDataTypes", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDataTypes", "kind": "class", "doc": "<p>Represents SQLite-specific data types.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SQLDataType]"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDatabase", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDatabase", "kind": "class", "doc": "<p>Represents a SQLite database.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect used by the database.</li>\n<li><strong>path (Path):</strong>  The file path to the SQLite database.</li>\n</ul>\n", "bases": "sqldatabase.sqldatabase.SQLDatabase[~T], typing.Generic[~T]"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDatabase.__init__", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDatabase.__init__", "kind": "function", "doc": "<p>Initialize a SQLiteDatabase instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>path (str | Path):</strong>  The file path to the SQLite database.</li>\n<li><strong>autocommit (bool, optional):</strong>  Whether to enable autocommit mode. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">path</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"n\">pathlib</span><span class=\"o\">.</span><span class=\"n\">_local</span><span class=\"o\">.</span><span class=\"n\">Path</span>, </span><span class=\"param\"><span class=\"n\">autocommit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDatabase.dialect", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDatabase.path", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDatabase.path", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlitedatabase.SQLiteDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqlitedatabase", "qualname": "SQLiteDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p>Get the fully qualified name of a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table for which to get the fully qualified name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqljoin", "modulename": "sqldatabase.sqljoin", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType", "kind": "class", "doc": "<p>Enumeration for SQL join types.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>CROSS (str):</strong>  Represents a CROSS JOIN.</li>\n<li><strong>FULL (str):</strong>  Represents a FULL OUTER JOIN.</li>\n<li><strong>INNER (str):</strong>  Represents an INNER JOIN.</li>\n<li><strong>LEFT (str):</strong>  Represents a LEFT OUTER JOIN.</li>\n<li><strong>RIGHT (str):</strong>  Represents a RIGHT OUTER JOIN.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBaseEnum"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType.CROSS", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType.CROSS", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLJoinType.CROSS: &#x27;CROSS&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType.FULL", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType.FULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLJoinType.FULL: &#x27;FULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType.INNER", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType.INNER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLJoinType.INNER: &#x27;INNER&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType.LEFT", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType.LEFT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLJoinType.LEFT: &#x27;LEFT&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.ESQLJoinType.RIGHT", "modulename": "sqldatabase.sqljoin", "qualname": "ESQLJoinType.RIGHT", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLJoinType.RIGHT: &#x27;RIGHT&#x27;&gt;"}, {"fullname": "sqldatabase.sqljoin.SQLJoin", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin", "kind": "class", "doc": "<p>Represents a SQL JOIN clause.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to join.</li>\n<li><strong>type (ESQLJoinType):</strong>  The type of join (e.g., INNER, LEFT).</li>\n<li><strong>condition (SQLCondition):</strong>  The condition for the join.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqljoin.SQLJoin.__init__", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin.__init__", "kind": "function", "doc": "<p>Initialize a SQLJoin instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to join.</li>\n<li><strong>columns (SQLColumn):</strong>  The columns involved in the join condition.</li>\n<li><strong>type_ (ESQLJoinType, optional):</strong>  The type of join. Defaults to INNER.</li>\n<li><strong>operator (ESQLComparisonOperator, optional):</strong>  The comparison operator. Defaults to IS_EQUAL.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span>,</span><span class=\"param\">\t<span class=\"n\">type_</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">ESQLJoinType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESQLJoinType</span><span class=\"o\">.</span><span class=\"n\">INNER</span><span class=\"p\">:</span> <span class=\"s1\">&#39;INNER&#39;</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">operator</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqloperator</span><span class=\"o\">.</span><span class=\"n\">ESQLComparisonOperator</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESQLComparisonOperator</span><span class=\"o\">.</span><span class=\"n\">EQUAL</span><span class=\"p\">:</span> <span class=\"s1\">&#39;=&#39;</span><span class=\"o\">&gt;</span></span>)</span>"}, {"fullname": "sqldatabase.sqljoin.SQLJoin.table", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin.table", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SQLJoin.type", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin.type", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SQLJoin.condition", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin.condition", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqljoin.SQLJoin.to_sql", "modulename": "sqldatabase.sqljoin", "qualname": "SQLJoin.to_sql", "kind": "function", "doc": "<p>Convert the join clause to its SQL representation.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the join clause.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqloperator", "modulename": "sqldatabase.sqloperator", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator", "kind": "class", "doc": "<p>Enumeration for SQL comparison operators.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>BETWEEN (str):</strong>  Represents the 'BETWEEN' operator.</li>\n<li><strong>EQUAL (str):</strong>  Represents the '=' operator.</li>\n<li><strong>GREATER_THAN (str):</strong>  Represents the '>' operator.</li>\n<li><strong>GREATER_THAN_OR_EQUAL (str):</strong>  Represents the '>=' operator.</li>\n<li><strong>IN (str):</strong>  Represents the 'IN' operator.</li>\n<li><strong>IS_NOT_NULL (str):</strong>  Represents the 'IS NOT NULL' operator.</li>\n<li><strong>IS_NULL (str):</strong>  Represents the 'IS NULL' operator.</li>\n<li><strong>LESS_THAN (str):</strong>  Represents the '&lt;' operator.</li>\n<li><strong>LESS_THAN_OR_EQUAL (str):</strong>  Represents the '&lt;=' operator.</li>\n<li><strong>LIKE (str):</strong>  Represents the 'LIKE' operator.</li>\n<li><strong>NOT_BETWEEN (str):</strong>  Represents the 'NOT BETWEEN' operator.</li>\n<li><strong>NOT_EQUAL (str):</strong>  Represents the '!=' operator.</li>\n<li><strong>NOT_IN (str):</strong>  Represents the 'NOT IN' operator.</li>\n<li><strong>NOT_LIKE (str):</strong>  Represents the 'NOT LIKE' operator.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBaseEnum"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.BETWEEN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.BETWEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.BETWEEN: &#x27;BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.EQUAL: &#x27;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.GREATER_THAN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.GREATER_THAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN: &#x27;&gt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.GREATER_THAN_OR_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.GREATER_THAN_OR_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.IN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.IN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IN: &#x27;IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.IS_NOT_NULL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.IS_NOT_NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IS_NOT_NULL: &#x27;IS NOT NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.IS_NULL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.IS_NULL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.IS_NULL: &#x27;IS NULL&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.LESS_THAN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.LESS_THAN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.LESS_THAN: &#x27;&lt;&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.LESS_THAN_OR_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.LESS_THAN_OR_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.GREATER_THAN_OR_EQUAL: &#x27;&lt;=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.LIKE", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.LIKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.LIKE: &#x27;LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.NOT_BETWEEN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.NOT_BETWEEN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_BETWEEN: &#x27;NOT BETWEEN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.NOT_EQUAL", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.NOT_EQUAL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_EQUAL: &#x27;!=&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.NOT_IN", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.NOT_IN", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_IN: &#x27;NOT IN&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLComparisonOperator.NOT_LIKE", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLComparisonOperator.NOT_LIKE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLComparisonOperator.NOT_LIKE: &#x27;NOT LIKE&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLLogicalOperator", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLLogicalOperator", "kind": "class", "doc": "<p>Enumeration for SQL logical operators.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>AND (str):</strong>  Represents the 'AND' operator.</li>\n<li><strong>OR (str):</strong>  Represents the 'OR' operator.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBaseEnum"}, {"fullname": "sqldatabase.sqloperator.ESQLLogicalOperator.AND", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLLogicalOperator.AND", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLLogicalOperator.AND: &#x27;AND&#x27;&gt;"}, {"fullname": "sqldatabase.sqloperator.ESQLLogicalOperator.OR", "modulename": "sqldatabase.sqloperator", "qualname": "ESQLLogicalOperator.OR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLLogicalOperator.OR: &#x27;OR&#x27;&gt;"}, {"fullname": "sqldatabase.sqlrecord", "modulename": "sqldatabase.sqlrecord", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord", "kind": "class", "doc": "<p>Represents a record in a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>_data (dict[SQLColumn | SQLFunction, Any]):</strong>  The data stored in the record.</li>\n</ul>\n", "bases": "collections.abc.MutableMapping"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.__init__", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.__init__", "kind": "function", "doc": "<p>Initialize a SQLRecord instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict[SQLColumn | SQLFunction, Any] | None, optional):</strong>  The data for the record. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.keys", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.keys", "kind": "function", "doc": "<p>Return a view of the keys in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>KeysView[SQLColumn | SQLFunction]: A view of the keys in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">KeysView</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.values", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.values", "kind": "function", "doc": "<p>Return a view of the values in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ValuesView[Any]: A view of the values in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ValuesView</span><span class=\"p\">[</span><span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.items", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.items", "kind": "function", "doc": "<p>Return a view of the items in the record.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>ItemsView[SQLColumn | SQLFunction, Any]: A view of the items in the record.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"n\">ItemsView</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.to_database_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.to_database_value", "kind": "function", "doc": "<p>Convert a value to its database representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The database representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.from_database_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.from_database_value", "kind": "function", "doc": "<p>Convert a value from its database representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The database representation of the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The original value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.to_database_parameters", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.to_database_parameters", "kind": "function", "doc": "<p>Convert the record to a dictionary of database parameters.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any]: The dictionary of database parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.from_database_row", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.from_database_row", "kind": "function", "doc": "<p>Create a SQLRecord instance from a database row.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>aliases (list[str]):</strong>  The list of aliases for the row.</li>\n<li><strong>row (tuple | pyodbc.Row):</strong>  The database row.</li>\n<li><strong>database (SQLDatabase):</strong>  The database instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLRecord: The created SQLRecord instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">aliases</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">row</span><span class=\"p\">:</span> <span class=\"nb\">tuple</span> <span class=\"o\">|</span> <span class=\"n\">pyodbc</span><span class=\"o\">.</span><span class=\"n\">Row</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">SQLDatabase</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.to_json_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.to_json_value", "kind": "function", "doc": "<p>Convert a value to its JSON representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The value to convert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The JSON representation of the value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.from_json_value", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.from_json_value", "kind": "function", "doc": "<p>Convert a value from its JSON representation.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>item (SQLColumn | SQLFunction):</strong>  The item associated with the value.</li>\n<li><strong>value (Any):</strong>  The JSON representation of the value.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>Any: The original value.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">item</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">value</span><span class=\"p\">:</span> <span class=\"n\">Any</span></span><span class=\"return-annotation\">) -> <span class=\"n\">Any</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.to_json", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.to_json", "kind": "function", "doc": "<p>Convert the record to a JSON-serializable dictionary.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any]: The JSON-serializable dictionary.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlrecord.SQLRecord.from_json", "modulename": "sqldatabase.sqlrecord", "qualname": "SQLRecord.from_json", "kind": "function", "doc": "<p>Create a SQLRecord instance from a JSON-serializable dictionary.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>data (dict[str, Any]):</strong>  The JSON-serializable dictionary.</li>\n<li><strong>database (SQLDatabase):</strong>  The database instance.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLRecord: The created SQLRecord instance.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">cls</span>,</span><span class=\"param\">\t<span class=\"n\">data</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">SQLDatabase</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlserverdatabase", "modulename": "sqldatabase.sqlserverdatabase", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLVarcharDataType", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLVarcharDataType", "kind": "class", "doc": "<p>Represents the SQL VARCHAR data type with a specified length.</p>\n", "bases": "sqldatabase.sqldatatype.SQLDataTypeWithParameter"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLVarcharDataType.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLVarcharDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLVarcharDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>length (int | str):</strong>  The maximum length of the VARCHAR data type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLNVarcharDataType", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLNVarcharDataType", "kind": "class", "doc": "<p>Represents the SQL NVARCHAR data type with a specified length.</p>\n", "bases": "sqldatabase.sqldatatype.SQLDataTypeWithParameter"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLNVarcharDataType.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLNVarcharDataType.__init__", "kind": "function", "doc": "<p>Initialize a SQLNVarcharDataType instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>length (int | str):</strong>  The maximum length of the NVARCHAR data type.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">length</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"nb\">str</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDataTypes", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDataTypes", "kind": "class", "doc": "<p>Represents SQL Server-specific data types.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>NVARCHAR (type):</strong>  Represents the NVARCHAR data type.</li>\n<li><strong>VARCHAR (type):</strong>  Represents the VARCHAR data type.</li>\n</ul>\n", "bases": "shared.enumlikecontainer.EnumLikeMixedContainer[sqldatabase.sqldatatype.SQLDataType]"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDataTypes.NVARCHAR", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDataTypes.NVARCHAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlserverdatabase.SQLNVarcharDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDataTypes.VARCHAR", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDataTypes.VARCHAR", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqlserverdatabase.SQLVarcharDataType&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase", "kind": "class", "doc": "<p>Represents a SQL Server database.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for SQL Server.</li>\n<li><strong>default_schema_name (str):</strong>  The default schema name (e.g., \"dbo\").</li>\n<li><strong>connection_string (str):</strong>  The connection string used to connect to the database.</li>\n</ul>\n", "bases": "sqldatabase.sqldatabase.SQLDatabase[~T], typing.Generic[~T]"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.__init__", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.__init__", "kind": "function", "doc": "<p>Initialize a SQLServerDatabase instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>server (str):</strong>  The server address.</li>\n<li><strong>database (str):</strong>  The database name.</li>\n<li><strong>driver (str, optional):</strong>  The ODBC driver. Defaults to \"ODBC Driver 17 for SQL Server\".</li>\n<li><strong>trusted_connection (bool, optional):</strong>  Whether to use a trusted connection. Defaults to True.</li>\n<li><strong>user_id (str | None, optional):</strong>  The user ID for authentication. Defaults to None.</li>\n<li><strong>password (str | None, optional):</strong>  The password for authentication. Defaults to None.</li>\n<li><strong>autocommit (bool, optional):</strong>  Whether to enable autocommit. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">server</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">database</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">driver</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ODBC Driver 17 for SQL Server&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">trusted_connection</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">user_id</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">password</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">autocommit</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.dialect", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.SQLSERVER: &#x27;tsql&#x27;&gt;"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.default_schema_name", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.default_schema_name", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;dbo&#x27;"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.server", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.server", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.database", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.database", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.driver", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.driver", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.trusted_connection", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.trusted_connection", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.user_id", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.user_id", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.password", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.password", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.connection_string", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.connection_string", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlserverdatabase.SQLServerDatabase.get_table_fully_qualified_name", "modulename": "sqldatabase.sqlserverdatabase", "qualname": "SQLServerDatabase.get_table_fully_qualified_name", "kind": "function", "doc": "<p>Get the fully qualified name of a table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table for which to get the fully qualified name.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the table in the format '<database>.<schema>.<table>'.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement", "modulename": "sqldatabase.sqlstatement", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.ESQLOrderByType", "modulename": "sqldatabase.sqlstatement", "qualname": "ESQLOrderByType", "kind": "class", "doc": "<p>Enumeration for SQL ORDER BY types.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>ASCENDING (str):</strong>  Represents ascending order.</li>\n<li><strong>DESCENDING (str):</strong>  Represents descending order.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBaseEnum"}, {"fullname": "sqldatabase.sqlstatement.ESQLOrderByType.ASCENDING", "modulename": "sqldatabase.sqlstatement", "qualname": "ESQLOrderByType.ASCENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLOrderByType.ASCENDING: &#x27;ASC&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.ESQLOrderByType.DESCENDING", "modulename": "sqldatabase.sqlstatement", "qualname": "ESQLOrderByType.DESCENDING", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLOrderByType.DESCENDING: &#x27;DESC&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement", "kind": "class", "doc": "<p>Represents a SQL statement.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>context (dict):</strong>  The context for rendering the statement.</li>\n<li><strong>template_parameters (dict[str, Any]):</strong>  Parameters for the statement template.</li>\n<li><strong>template_sql (str):</strong>  The rendered SQL template.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>parameters (dict[str, Any] | None, optional):</strong>  Parameters for the statement template. Defaults to None.</li>\n<li><strong>context (dict):</strong>  Additional context for rendering the statement.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">context</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.template_dialect", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.template_dialect", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.dialect", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.dialect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.context", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.context", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.template_parameters", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.template_parameters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.template_sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.template_sql", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.sql", "kind": "variable", "doc": "<p>Get the SQL representation of the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the statement.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.parameters", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.parameters", "kind": "variable", "doc": "<p>Get the parameters for the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any] | Sequence: The parameters for the statement.</p>\n</blockquote>\n", "annotation": ": dict[str, typing.Any] | Sequence"}, {"fullname": "sqldatabase.sqlstatement.SQLStatement.to_sql", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLStatement.to_sql", "kind": "function", "doc": "<p>Get the SQL representation of the statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The SQL representation of the statement.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement.SQLCreateTableStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLCreateTableStatement", "kind": "class", "doc": "<p>Represents a SQL CREATE TABLE statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLCreateTableStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLCreateTableStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLCreateTableStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to create.</li>\n<li><strong>if_not_exists (bool, optional):</strong>  Whether to include IF NOT EXISTS. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_not_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLCreateTableStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLCreateTableStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;create_table_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SQLDropTableStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDropTableStatement", "kind": "class", "doc": "<p>Represents a SQL DROP TABLE statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLDropTableStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDropTableStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLDropTableStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to drop.</li>\n<li><strong>if_exists (bool, optional):</strong>  Whether to include IF EXISTS. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">if_exists</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLDropTableStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDropTableStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;drop_table_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SQLInsertIntoStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLInsertIntoStatement", "kind": "class", "doc": "<p>Represents a SQL INSERT INTO statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLInsertIntoStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLInsertIntoStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLInsertIntoStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to insert into.</li>\n<li><strong>record (SQLRecord):</strong>  The record to insert.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLInsertIntoStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLInsertIntoStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;insert_into_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SQLSelectStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLSelectStatement", "kind": "class", "doc": "<p>Represents a SQL SELECT statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLSelectStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLSelectStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLSelectStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to select from.</li>\n<li><strong>*items (SQLColumn | SQLFunction):</strong>  The columns or aggregate functions to select.</li>\n<li><strong>where_condition (SQLCondition | None, optional):</strong>  The WHERE condition. Defaults to None.</li>\n<li><strong>joins (list[SQLJoin] | None, optional):</strong>  The JOIN clauses. Defaults to None.</li>\n<li><strong>group_by_columns (list[SQLColumn] | None, optional):</strong>  The GROUP BY columns. Defaults to None.</li>\n<li><strong>having_condition (SQLCondition | None, optional):</strong>  The HAVING condition. Defaults to None.</li>\n<li><strong>order_by_items (list[SQLColumn | SQLFunction | ESQLOrderByType] | None, optional):</strong>  The ORDER BY items. Defaults to None.</li>\n<li><strong>distinct (bool, optional):</strong>  Whether to include DISTINCT. Defaults to False.</li>\n<li><strong>limit (int | None, optional):</strong>  The LIMIT value. Defaults to None.</li>\n<li><strong>offset (int | None, optional):</strong>  The OFFSET value. Defaults to None.</li>\n<li><strong>is_subquery (bool, optional):</strong>  Whether the statement is a subquery. Defaults to False.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SQLJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESQLOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">is_subquery</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLSelectStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLSelectStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;select_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SQLSelectStatement.generate_parameter_name", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLSelectStatement.generate_parameter_name", "kind": "function", "doc": "<p>Generate a unique parameter name for the SELECT statement.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The generated parameter name.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqlstatement.SQLUpdateStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLUpdateStatement", "kind": "class", "doc": "<p>Represents a SQL UPDATE statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLUpdateStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLUpdateStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLUpdateStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to update.</li>\n<li><strong>record (SQLRecord):</strong>  The record with updated values.</li>\n<li><strong>where_condition (SQLCondition):</strong>  The WHERE condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLUpdateStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLUpdateStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;update_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqlstatement.SQLDeleteStatement", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDeleteStatement", "kind": "class", "doc": "<p>Represents a SQL DELETE statement.</p>\n", "bases": "SQLStatement"}, {"fullname": "sqldatabase.sqlstatement.SQLDeleteStatement.__init__", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDeleteStatement.__init__", "kind": "function", "doc": "<p>Initialize a SQLDeleteStatement instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>dialect (ESQLDialect):</strong>  The SQL dialect for the statement.</li>\n<li><strong>table (SQLTable):</strong>  The table to delete from.</li>\n<li><strong>where_condition (SQLCondition):</strong>  The WHERE condition.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span>)</span>"}, {"fullname": "sqldatabase.sqlstatement.SQLDeleteStatement.template_file", "modulename": "sqldatabase.sqlstatement", "qualname": "SQLDeleteStatement.template_file", "kind": "variable", "doc": "<p></p>\n", "default_value": "&#x27;delete_statement.sql.j2&#x27;"}, {"fullname": "sqldatabase.sqltable", "modulename": "sqldatabase.sqltable", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltable.SQLTable", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable", "kind": "class", "doc": "<p>Represents a SQL table.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>name (str):</strong>  The name of the table.</li>\n<li><strong>columns (T):</strong>  The columns in the table.</li>\n<li><strong>database (SQLDatabase):</strong>  The database the table belongs to.</li>\n</ul>\n", "bases": "sqldatabase.sqlbase.SQLBase, typing.Generic[~T]"}, {"fullname": "sqldatabase.sqltable.SQLTable.__init__", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.__init__", "kind": "function", "doc": "<p>Initialize a SQLTable instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>name (str | None, optional):</strong>  The name of the table. Defaults to None.</li>\n<li><strong>schema_name (str | None, optional):</strong>  The schema name of the table. Defaults to None.</li>\n<li><strong>columns (T | None, optional):</strong>  The columns in the table. Defaults to None.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">schema_name</span><span class=\"p\">:</span> <span class=\"nb\">str</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">columns</span><span class=\"p\">:</span> <span class=\"n\">Optional</span><span class=\"p\">[</span><span class=\"o\">~</span><span class=\"n\">T</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span>)</span>"}, {"fullname": "sqldatabase.sqltable.SQLTable.name", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.name", "kind": "variable", "doc": "<p></p>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqltable.SQLTable.columns", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.columns", "kind": "variable", "doc": "<p></p>\n", "annotation": ": ~T"}, {"fullname": "sqldatabase.sqltable.SQLTable.database", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.database", "kind": "variable", "doc": "<p></p>\n", "annotation": ": sqldatabase.sqldatabase.SQLDatabase"}, {"fullname": "sqldatabase.sqltable.SQLTable.fully_qualified_name", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.fully_qualified_name", "kind": "variable", "doc": "<p>Get the fully qualified name of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The fully qualified name of the table.</p>\n</blockquote>\n", "annotation": ": str"}, {"fullname": "sqldatabase.sqltable.SQLTable.schema_name", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.schema_name", "kind": "variable", "doc": "<p>Get the schema name of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str | None: The schema name of the table.</p>\n</blockquote>\n", "annotation": ": str | None"}, {"fullname": "sqldatabase.sqltable.SQLTable.primary_key_column", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.primary_key_column", "kind": "variable", "doc": "<p>Get the primary key column of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLColumn | None: The primary key column of the table.</p>\n</blockquote>\n", "annotation": ": sqldatabase.sqlcolumn.SQLColumn | None"}, {"fullname": "sqldatabase.sqltable.SQLTable.foreign_key_columns", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.foreign_key_columns", "kind": "variable", "doc": "<p>Get the foreign key columns of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SQLColumn]: The foreign key columns of the table.</p>\n</blockquote>\n", "annotation": ": list[sqldatabase.sqlcolumn.SQLColumn]"}, {"fullname": "sqldatabase.sqltable.SQLTable.referenced_tables", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.referenced_tables", "kind": "variable", "doc": "<p>Get the tables referenced by the foreign key columns of the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SQLTable]: The tables referenced by the foreign key columns of the table.</p>\n</blockquote>\n", "annotation": ": list[sqldatabase.sqltable.SQLTable]"}, {"fullname": "sqldatabase.sqltable.SQLTable.get_column", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.get_column", "kind": "function", "doc": "<p>Get a column by name.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>column_name (str):</strong>  The name of the column.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLColumn: The column with the specified name.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If the column is not found.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">column_name</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.get_foreign_key_column", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.get_foreign_key_column", "kind": "function", "doc": "<p>Get the foreign key column that references the specified table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to find the foreign key column for.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLColumn | None: The foreign key column that references the specified table, or None if not found.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.join", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.join", "kind": "function", "doc": "<p>Create a join with another table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>table (SQLTable):</strong>  The table to join with.</li>\n<li><strong>join_type (ESQLJoinType, optional):</strong>  The type of join. Defaults to ESQLJoinType.INNER.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>SQLJoin: The join with the specified table.</p>\n</blockquote>\n\n<h6 id=\"raises\">Raises:</h6>\n\n<ul>\n<li><strong>AssertionError:</strong>  If no foreign key column is found to join the tables.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">table</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltable</span><span class=\"o\">.</span><span class=\"n\">SQLTable</span>,</span><span class=\"param\">\t<span class=\"n\">join_type</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">ESQLJoinType</span> <span class=\"o\">=</span> <span class=\"o\">&lt;</span><span class=\"n\">ESQLJoinType</span><span class=\"o\">.</span><span class=\"n\">INNER</span><span class=\"p\">:</span> <span class=\"s1\">&#39;INNER&#39;</span><span class=\"o\">&gt;</span></span><span class=\"return-annotation\">) -> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SQLJoin</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.insert_records", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.insert_records", "kind": "function", "doc": "<p>Insert records into the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>records (SQLRecord | Sequence[SQLRecord]):</strong>  The records to insert.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the inserted records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">records</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span><span class=\"p\">]</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.select_records", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.select_records", "kind": "function", "doc": "<p>Select records from the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>*items (SQLColumn | SQLFunction):</strong>  The columns or aggregate functions to select.</li>\n<li><strong>where_condition (SQLCondition | None, optional):</strong>  The condition to filter the records. Defaults to None.</li>\n<li><strong>joins (list[SQLJoin] | None, optional):</strong>  The joins to apply. Defaults to None.</li>\n<li><strong>group_by_columns (list[SQLColumn] | None, optional):</strong>  The columns to group by. Defaults to None.</li>\n<li><strong>having_condition (SQLCondition | None, optional):</strong>  The condition to filter the groups. Defaults to None.</li>\n<li><strong>order_by_items (list[SQLColumn | SQLFunction | ESQLOrderByType] | None, optional):</strong>  The items to order by. Defaults to None.</li>\n<li><strong>distinct (bool, optional):</strong>  Whether to select distinct records. Defaults to False.</li>\n<li><strong>limit (int | None, optional):</strong>  The maximum number of records to return. Defaults to None.</li>\n<li><strong>offset (int | None, optional):</strong>  The number of records to skip. Defaults to None.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[SQLRecord]: The selected records.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"o\">*</span><span class=\"n\">items</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">joins</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqljoin</span><span class=\"o\">.</span><span class=\"n\">SQLJoin</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">group_by_columns</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">having_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">order_by_items</span><span class=\"p\">:</span> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcolumn</span><span class=\"o\">.</span><span class=\"n\">SQLColumn</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlfunction</span><span class=\"o\">.</span><span class=\"n\">SQLFunction</span> <span class=\"o\">|</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlstatement</span><span class=\"o\">.</span><span class=\"n\">ESQLOrderByType</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">distinct</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">limit</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">offset</span><span class=\"p\">:</span> <span class=\"nb\">int</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.update_records", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.update_records", "kind": "function", "doc": "<p>Update records in the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>record (SQLRecord):</strong>  The record with updated values.</li>\n<li><strong>where_condition (SQLCondition):</strong>  The condition to filter the records to update.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the updated records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">record</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlrecord</span><span class=\"o\">.</span><span class=\"n\">SQLRecord</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.delete_records", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.delete_records", "kind": "function", "doc": "<p>Delete records from the table.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>where_condition (SQLCondition):</strong>  The condition to filter the records to delete.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>list[int] | None: The IDs of the deleted records, or None if the operation failed.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">where_condition</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqlcondition</span><span class=\"o\">.</span><span class=\"n\">SQLCondition</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">list</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"kc\">None</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTable.record_count", "modulename": "sqldatabase.sqltable", "qualname": "SQLTable.record_count", "kind": "function", "doc": "<p>Get the count of records in the table.</p>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>int: The count of records in the table.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">int</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltable.SQLTables", "modulename": "sqldatabase.sqltable", "qualname": "SQLTables", "kind": "class", "doc": "<p>Container for managing multiple SQL tables.</p>\n", "bases": "shared.enumlikecontainer.EnumLikeContainer[sqldatabase.sqltable.SQLTable]"}, {"fullname": "sqldatabase.sqltable.SQLTables.item_type", "modulename": "sqldatabase.sqltable", "qualname": "SQLTables.item_type", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;class &#x27;sqldatabase.sqltable.SQLTable&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler", "modulename": "sqldatabase.sqltranspiler", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltranspiler.ESQLDialect", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESQLDialect", "kind": "class", "doc": "<p>Enumeration for supported SQL dialects.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>MYSQL (str):</strong>  Represents the MySQL dialect.</li>\n<li><strong>POSTGRESQL (str):</strong>  Represents the PostgreSQL dialect.</li>\n<li><strong>SQLITE (str):</strong>  Represents the SQLite dialect.</li>\n<li><strong>SQLSERVER (str):</strong>  Represents the SQL Server dialect.</li>\n</ul>\n", "bases": "enum.Enum"}, {"fullname": "sqldatabase.sqltranspiler.ESQLDialect.MYSQL", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESQLDialect.MYSQL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.MYSQL: &#x27;mysql&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESQLDialect.POSTGRESQL", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESQLDialect.POSTGRESQL", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.POSTGRESQL: &#x27;postgres&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESQLDialect.SQLITE", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESQLDialect.SQLITE", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.SQLITE: &#x27;sqlite&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.ESQLDialect.SQLSERVER", "modulename": "sqldatabase.sqltranspiler", "qualname": "ESQLDialect.SQLSERVER", "kind": "variable", "doc": "<p></p>\n", "default_value": "&lt;ESQLDialect.SQLSERVER: &#x27;tsql&#x27;&gt;"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler", "kind": "class", "doc": "<p>Transpiles SQL queries between different SQL dialects.</p>\n\n<h6 id=\"attributes\">Attributes:</h6>\n\n<ul>\n<li><strong>output_dialect (ESQLDialect):</strong>  The target SQL dialect for transpilation.</li>\n<li><strong>_cache (dict[tuple[str, str | None], sqlglot.Expression]):</strong>  Cache for parsed SQL expressions.</li>\n</ul>\n"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler.__init__", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler.__init__", "kind": "function", "doc": "<p>Initialize a SQLTranspiler instance.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>output_dialect (ESQLDialect):</strong>  The target SQL dialect for transpilation.</li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">output_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span></span>)</span>"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler.output_dialect", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler.output_dialect", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler.transpile", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler.transpile", "kind": "function", "doc": "<p>Transpile a SQL query and its parameters to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query to transpile.</li>\n<li><strong>parameters (dict[str, Any] | Sequence | None, optional):</strong>  Parameters for the query. Defaults to None.</li>\n<li><strong>input_dialect (ESQLDialect | None, optional):</strong>  The source SQL dialect. Defaults to None.</li>\n<li><strong>pretty (bool, optional):</strong>  Whether to format the SQL query. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>tuple[str, dict[str, Any] | Sequence]: The transpiled SQL query and its parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">input_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">tuple</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span><span class=\"p\">]</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler.transpile_sql", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler.transpile_sql", "kind": "function", "doc": "<p>Transpile a SQL query to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query to transpile.</li>\n<li><strong>input_dialect (ESQLDialect | None, optional):</strong>  The source SQL dialect. Defaults to None.</li>\n<li><strong>pretty (bool, optional):</strong>  Whether to format the SQL query. Defaults to False.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>str: The transpiled SQL query.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">input_dialect</span><span class=\"p\">:</span> <span class=\"n\">sqldatabase</span><span class=\"o\">.</span><span class=\"n\">sqltranspiler</span><span class=\"o\">.</span><span class=\"n\">ESQLDialect</span> <span class=\"o\">|</span> <span class=\"kc\">None</span> <span class=\"o\">=</span> <span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">pretty</span><span class=\"p\">:</span> <span class=\"nb\">bool</span> <span class=\"o\">=</span> <span class=\"kc\">False</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">str</span>:</span></span>", "funcdef": "def"}, {"fullname": "sqldatabase.sqltranspiler.SQLTranspiler.transpile_parameters", "modulename": "sqldatabase.sqltranspiler", "qualname": "SQLTranspiler.transpile_parameters", "kind": "function", "doc": "<p>Transpile the parameters of a SQL query to the target dialect.</p>\n\n<h6 id=\"arguments\">Arguments:</h6>\n\n<ul>\n<li><strong>sql (str):</strong>  The SQL query.</li>\n<li><strong>parameters (dict[str, Any] | Sequence | None):</strong>  Parameters for the query.</li>\n</ul>\n\n<h6 id=\"returns\">Returns:</h6>\n\n<blockquote>\n  <p>dict[str, Any] | Sequence: The transpiled parameters.</p>\n</blockquote>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">sql</span><span class=\"p\">:</span> <span class=\"nb\">str</span>,</span><span class=\"param\">\t<span class=\"n\">parameters</span><span class=\"p\">:</span> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span> <span class=\"o\">|</span> <span class=\"kc\">None</span></span><span class=\"return-annotation\">) -> <span class=\"nb\">dict</span><span class=\"p\">[</span><span class=\"nb\">str</span><span class=\"p\">,</span> <span class=\"n\">typing</span><span class=\"o\">.</span><span class=\"n\">Any</span><span class=\"p\">]</span> <span class=\"o\">|</span> <span class=\"n\">Sequence</span>:</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();